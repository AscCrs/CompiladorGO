options {
    IGNORE_CASE = true;
    STATIC = false;
    BUILD_PARSER = true;
}

PARSER_BEGIN(GolangParser)

package Analizador;
public class GolangParser { }

PARSER_END(GolangParser)

SKIP : {
    " "
  | "\t"
  | "\r"
  | "\n"
  |  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
  |  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

// Palabras reservadas
TOKEN : { 
    < IMPORT : "import" >
|   < PACKAGE : "package" >
|   < FUNC : "func" >
|   < VAR : "var" >
|   < CONST : "const" >
|   < TYPE : "type" >
|   < STRUCT : "struct" >
|   < MAP : "map" >
|   < SLICE : "slice" >
|   < RANGE : "range" >
|   < FOR : "for" >
|   < IF : "if" >
|   < ELSE : "else" >
|   < SWITCH : "switch" >
|   < CASE : "case" >
|   < DEF : "default" >
|   < RETURN : "return" >
|   <FMT : "fmt">
|   <PRINTLN : "Println">
|   <PRINT : "Print">
}

// Operadores
TOKEN : {
    < DOT : "." >
|   < PLUS : "+" >
|   < MINUS : "-" >
|   < MULTIPLY : "*" >
|   < DIVIDE : "/" >
|   < MOD : "%" >
|   < XOR : "^" >
|   < EQUAL : "==" >
|   < ASSIGN : "=" >
|   < NOT_EQUAL : "!=" >
|   < COLON : ":" >
|   < COLON_ASSIGN : ":=" >
|   < LT : "<" >
|   < GT : ">" >
|   < GTE : ">=" >
|   < LTE : "<=" >
|   < AND : "&&" >
|   < OR : "||" >
|   < NOT : "!" >
}

// Delimitadores
TOKEN : {
    < LPAREN : "(" >
|   < RPAREN : ")" >
|   < LBRACE : "{" >
|   < RBRACE : "}" >
|   < LBRACKET : "[" >
|   < RBRACKET : "]" >
|   < COMMA : "," >
|   < SEMICOLON : ";" >
}

// Identificadores y literales
TOKEN : { 
    < IDENTIFIER : (["a"-"z", "A"-"Z", "_"]) (["a"-"z", "A"-"Z", "0"-"9", "_"])* >
|   < INTEGER : (["0"-"9"])+ >
|   < FLOAT : (["0"-"9"])+ "." (["0"-"9"])* >
|   < STRING : 
          "\"" ( ~["\"","\\","\n","\r"] 
        | "\\" ( ["n","t","b","r","f","\\","\'","\""] 
        | ["0"-"7"] (["0"-"7"])?  
        | ["0"-"3"] ["0"-"7"] ["0"-"7"] 
        | ( ["\n","\r"] 
        | "\r\n")))* "\""
    >
}

// Inicio de la gramática
void Start() : {}
{
    PackageClause() ImportDecl() (TopLevelDeclaration())* <EOF>
}

void PackageClause() : {}
{
    <PACKAGE> Identifier()
}

void ImportDecl() : {}
{
    <IMPORT> ("("ImportSpec() ( <SEMICOLON> ImportSpec() )* ")")?
}

void ImportSpec() : {}
{
    <STRING>
|   Identifier() <STRING>
}

// Declaraciones a nivel superior
void TopLevelDeclaration() : {}
{
    FunctionDecl()
|   TypeDecl()
|   VarStatement()
}

// Declaración de funciones
void FunctionDecl() : {}
{
    <FUNC> Identifier() Signature() Block()
}

void Signature() : {}
{
    Parameters() ( Result() )?
}

void Parameters() : {}
{
    <LPAREN> ( ParameterList() )? <RPAREN>
}

void ParameterList() : {}
{
    ParameterDecl() ( <COMMA> ParameterDecl() )*
}

void ParameterDecl() : {}
{
    Identifier() Type()
}

void Result() : {}
{
    Parameters()
|   Type()
}

// Declaración de tipos
void TypeDecl() : {}
{
    <TYPE> Identifier() Type()
}

void Type() : {}
{
    <STRUCT> <LBRACE> (FieldDecl())* <RBRACE>
|   <IDENTIFIER>
}

void FieldDecl() : {}
{
    Identifier() Type()
}

// Bloques y declaraciones de variables
void Block() : {}
{
    <LBRACE> (Statement())* <RBRACE>
}

void Statement() : {}
{
    VarStatement()
|   ExpressionStatement()
|   ReturnStatement()
|   Block()
|   IfStatement()
|   ForStatement()
|   Print()
}

void Print() : {}
{
<FMT> <DOT> (<PRINT> | <PRINTLN>) "(" (Expression() (<COMMA> Expression())*)? ")"
}

void VarStatement() : {}
{
    VarDeclaration()
|   (IdentifierList() (ShortDeclaration() | Assignment()))

}

void VarDeclaration() : {}
{
    <VAR> IdentifierList() ( (<ASSIGN> ExpressionList()) | Multiple())?
}

void Multiple() : {}
{
    Expression() (<ASSIGN> Expression() (<COMMA> Expression())*)?
}

void ShortDeclaration() : {}
{
    <COLON_ASSIGN> ExpressionList()
}

void Assignment() : {}
{
    <ASSIGN> ExpressionList() 
}

void ExpressionStatement() : {}
{
    Expression()
}

void ReturnStatement() : {}
{
    <RETURN> (Operation())?
}

void Operation() : {}
{
    Expression() (Operator() Expression())*
}

void IfStatement() : {}
{
    <IF> condicion() ( op_logic() condicion() )* Block() ( <ELSE> Block() )?
}

void condicion(): {}
{
    condicionS() (op_logic() condicionS())*
}

void condicionS(): {}
{
    Expression() op_relation() Expression()
}

void op_logic(): {}
{
      <AND>
    | <OR>
    | <NOT>
}

void op_relation(): {}
{
      <NOT_EQUAL>
    | <LT>
    | <LTE>
    | <EQUAL>
    | <GT>
    | <GTE>
    | <NOT>
}

void ForStatement() : {}
{
    <FOR> condicionS() Block() | (IdentifierList() (ShortDeclaration() | Assignment()) <SEMICOLON> condicionS() <SEMICOLON> STEP() Block()) 
}

void STEP() : {}
{
    <IDENTIFIER> ("++" | "--")
}

// Listas de identificadores y expresiones
void IdentifierList() : {}
{
    Identifier() ( <COMMA> Identifier() )*
}

void Identifier() : {}
{
    <IDENTIFIER>
}

void ExpressionList() : {}
{
    Expression() ( <COMMA> Expression() )* 
}

void Expression() : {}
{
    <INTEGER>
|   <FLOAT>
|   ( <IDENTIFIER> (Exxxpresion())? )
|   <STRING>
}

void Exxxpresion() : {}
{
    "(" (Expression() (OList() | EList()))? ")"
}

void EList() : {}
{
    ( <COMMA> Expression() ) *
}

void OList() : {}
{
    (Operator() Expression())*
}

void Operator() : {}
{
    <PLUS>
    | <MINUS>
    | <MULTIPLY>
    | <DIVIDE>
    | <MOD>
}