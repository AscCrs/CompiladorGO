options {
  IGNORE_CASE = true;
  STATIC = false;
  BUILD_PARSER = true;
  FORCE_LA_CHECK = true;
}

PARSER_BEGIN(GolangParser)

import java.io.*;
public class GolangParser {
    public static void main(String[] args) {
        try {
            GolangParser parser = new GolangParser(System.in);
            parser.CompilationUnit();
            System.out.println("Parsing completed successfully.");
        } catch (ParseException e) {
            System.err.println(e.getMessage());
        } catch (TokenMgrError e) {
            System.err.println("Lexical error: " + e.getMessage());
        }
    }
}

PARSER_END(GolangParser)

SKIP : {
    " "
  | "\t"
  | "\r"
  | "\n"
  |  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
  |  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

// Palabras reservadas
TOKEN : { 
    < IMPORT : "import" >
|   < PACKAGE : "package" >
|   < FUNC : "func" >
|   < VAR : "var" >
|   < CONST : "const" >
|   < TYPE : "type" >
|   < STRUCT : "struct" >
|   < INTERFACE : "interface" >
|   < MAP : "map" >
|   < SLICE : "slice" >
|   < RANGE : "range" >
|   < FOR : "for" >
|   < IF : "if" >
|   < ELSE : "else" >
|   < SWITCH : "switch" >
|   < CASE : "case" >
|   < DEFAULT : "default" >
|   < RETURN : "return" >
|   < CHAN : "chan" >
}

// Operadores
TOKEN : {
    < DOT : "." >
|   < PLUS : "+" >
|   < MINUS : "-" >
|   < MULTIPLY : "*" >
|   < DIVIDE : "/" >
|   < MOD : "%" >
|   < XOR : "^" >
|   < EQUAL : "==" >
|   < ASSIGN : "=" >
|   < NOT_EQUAL : "!=" >
|   < COLON : ":" >
|   < COLON_ASSIGN : ":=" >
|   < LT : "<" >
|   < GT : ">" >
|   < GTE : ">=" >
|   < LTE : "<=" >
|   < AND : "&&" >
|   < OR : "||" >
|   < NOT : "!" >
}

// Delimitadores
TOKEN : {
    < LPAREN : "(" >
|   < RPAREN : ")" >
|   < LBRACE : "{" >
|   < RBRACE : "}" >
|   < LBRACKET : "[" >
|   < RBRACKET : "]" >
|   < COMMA : "," >
|   < SEMICOLON : ";" >
}

// Identificadores y literales
TOKEN : { 
    < IDENTIFIER : (["a"-"z", "A"-"Z", "_"]) (["a"-"z", "A"-"Z", "0"-"9", "_"])* >
|   < INTEGER : (["0"-"9"])+ >
|   < FLOAT : (["0"-"9"])+ "." (["0"-"9"])* >
|   < STRING : 
          "\"" ( ~["\"","\\","\n","\r"] 
        | "\\" ( ["n","t","b","r","f","\\","\'","\""] 
        | ["0"-"7"] (["0"-"7"])?  
        | ["0"-"3"] ["0"-"7"] ["0"-"7"] 
        | ( ["\n","\r"] 
        | "\r\n")))* "\""
    >
}

// Reglas gramaticales
void CompilationUnit() : {}
{
    (PackageClause() ImportDecl()* TopLevelDecl()*) <EOF>
}

void PackageClause() : {}
{
    <PACKAGE> <IDENTIFIER> <SEMICOLON>
}

void ImportDecl() : {}
{
    <IMPORT> ImportSpec() <SEMICOLON>
}

void ImportSpec() : {}
{
    ( <LPAREN> ImportSpec() (<SEMICOLON>)* <RPAREN> ) | ( <STRING> )
}

void TopLevelDecl() : {}
{
    FunctionDecl() | TypeDecl() | VarDecl()
}

void FunctionDecl() : {}
{
    <FUNC> <IDENTIFIER> Signature() FunctionBody()
}

void Signature() : {}
{
    <LPAREN> ParameterList() <RPAREN>
}

void ParameterList() : {}
{
    ( ParameterDecl() ( <COMMA> ParameterDecl() )* )?
}

void ParameterDecl() : {}
{
    <IDENTIFIER> <IDENTIFIER>
}

void FunctionBody() : {}
{
    Block()
}

void Block() : {}
{
    <LBRACE> StatementList() <RBRACE>
}

void StatementList() : {}
{
    ( Statement() )*
}

void Statement() : {}
{
    SimpleStmt() | ReturnStmt() | Block() | IfStmt() | ForStmt()
}

void SimpleStmt() : {}
{
    ExpressionStmt() | Assignment() | ShortVarDecl()
}

void ExpressionStmt() : {}
{
    Expression()
}

void Assignment() : {}
{
    Expression() <ASSIGN> Expression()
}

void ShortVarDecl() : {}
{
    <IDENTIFIER> <COLON_ASSIGN> Expression()
}

void ReturnStmt() : {}
{
    <RETURN> Expression() <SEMICOLON>
}

void IfStmt() : {}
{
    <IF> Expression() Block() ( <ELSE> Block() )?
}

void ForStmt() : {}
{
    <FOR> ( ForClause() | RangeClause() ) Block()
}

void ForClause() : {}
{
    SimpleStmt() <SEMICOLON> Expression() <SEMICOLON> SimpleStmt()
}

void RangeClause() : {}
{
    ( <IDENTIFIER> <COMMA> <IDENTIFIER> | <IDENTIFIER> ) <COLON_ASSIGN> <RANGE> Expression()
}

void Expression() : {}
{
    Primary() ( <PLUS> Primary() | <MINUS> Primary() | <MULTIPLY> Primary() | <DIVIDE> Primary() | <MOD> Primary() )*
}

void Primary() : {}
{
    <IDENTIFIER> | <INTEGER> | <FLOAT> | <STRING> | <LPAREN> Expression() <RPAREN>
}

void TypeDecl() : {}
{
    <TYPE> ( TypeSpec() ( <COMMA> TypeSpec() )* ) <SEMICOLON>
}

void TypeSpec() : {}
{
    <IDENTIFIER> Type()
}

void Type() : {}
{
    TypeName() | TypeLit() | <LPAREN> Type() <RPAREN>
}

void TypeName() : {}
{
    <IDENTIFIER>
}

void TypeLit() : {}
{
    ArrayType() | StructType() | PointerType() | FunctionType() | InterfaceType() | SliceType() | MapType() | ChannelType()
}

void ArrayType() : {}
{
    <LBRACKET> ArrayLength() <RBRACKET> ElementType()
}

void ArrayLength() : {}
{
    <INTEGER>
}

void ElementType() : {}
{
    Type()
}

void StructType() : {}
{
    <STRUCT> <LBRACE> FieldDecl() ( <SEMICOLON> FieldDecl() )* <RBRACE>
}

void FieldDecl() : {}
{
    IdentifierList() Type()
}

void IdentifierList() : {}
{
    <IDENTIFIER> ( <COMMA> <IDENTIFIER> )*
}

void PointerType() : {}
{
    <MULTIPLY> BaseType()
}

void BaseType() : {}
{
    Type()
}

void FunctionType() : {}
{
    <FUNC> Signature()
}

void InterfaceType() : {}
{
    <INTERFACE> <LBRACE> MethodSpec() ( <SEMICOLON> MethodSpec() )* <RBRACE>
}

void MethodSpec() : {}
{
    <IDENTIFIER> Signature()
}

void SliceType() : {}
{
    <LBRACKET> <RBRACKET> ElementType()
}

void MapType() : {}
{
    <MAP> <LBRACKET> KeyType() <RBRACKET> ElementType()
}

void KeyType() : {}
{
    Type()
}

void VarDecl() : {}
{
    <VAR> VarSpec() (<COMMA> VarSpec())* <SEMICOLON>
}

void VarSpec() : {}
{
    <IDENTIFIER> ( <COMMA> <IDENTIFIER> )* Type() ( <ASSIGN> Expression() )?
}
