/* Generated By:JavaCC: Do not edit this line. GolangParserConstants.java */
package Analizador;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GolangParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int IMPORT = 7;
  /** RegularExpression Id. */
  int PACKAGE = 8;
  /** RegularExpression Id. */
  int FUNC = 9;
  /** RegularExpression Id. */
  int VAR = 10;
  /** RegularExpression Id. */
  int CONST = 11;
  /** RegularExpression Id. */
  int TYPE = 12;
  /** RegularExpression Id. */
  int STRUCT = 13;
  /** RegularExpression Id. */
  int INTERFACE = 14;
  /** RegularExpression Id. */
  int MAP = 15;
  /** RegularExpression Id. */
  int SLICE = 16;
  /** RegularExpression Id. */
  int RANGE = 17;
  /** RegularExpression Id. */
  int FOR = 18;
  /** RegularExpression Id. */
  int IF = 19;
  /** RegularExpression Id. */
  int ELSE = 20;
  /** RegularExpression Id. */
  int SWITCH = 21;
  /** RegularExpression Id. */
  int CASE = 22;
  /** RegularExpression Id. */
  int DEF = 23;
  /** RegularExpression Id. */
  int RETURN = 24;
  /** RegularExpression Id. */
  int CHAN = 25;
  /** RegularExpression Id. */
  int DOT = 26;
  /** RegularExpression Id. */
  int PLUS = 27;
  /** RegularExpression Id. */
  int MINUS = 28;
  /** RegularExpression Id. */
  int MULTIPLY = 29;
  /** RegularExpression Id. */
  int DIVIDE = 30;
  /** RegularExpression Id. */
  int MOD = 31;
  /** RegularExpression Id. */
  int XOR = 32;
  /** RegularExpression Id. */
  int EQUAL = 33;
  /** RegularExpression Id. */
  int ASSIGN = 34;
  /** RegularExpression Id. */
  int NOT_EQUAL = 35;
  /** RegularExpression Id. */
  int COLON = 36;
  /** RegularExpression Id. */
  int COLON_ASSIGN = 37;
  /** RegularExpression Id. */
  int LT = 38;
  /** RegularExpression Id. */
  int GT = 39;
  /** RegularExpression Id. */
  int GTE = 40;
  /** RegularExpression Id. */
  int LTE = 41;
  /** RegularExpression Id. */
  int AND = 42;
  /** RegularExpression Id. */
  int OR = 43;
  /** RegularExpression Id. */
  int NOT = 44;
  /** RegularExpression Id. */
  int LPAREN = 45;
  /** RegularExpression Id. */
  int RPAREN = 46;
  /** RegularExpression Id. */
  int LBRACE = 47;
  /** RegularExpression Id. */
  int RBRACE = 48;
  /** RegularExpression Id. */
  int LBRACKET = 49;
  /** RegularExpression Id. */
  int RBRACKET = 50;
  /** RegularExpression Id. */
  int COMMA = 51;
  /** RegularExpression Id. */
  int SEMICOLON = 52;
  /** RegularExpression Id. */
  int IDENTIFIER = 53;
  /** RegularExpression Id. */
  int INTEGER = 54;
  /** RegularExpression Id. */
  int FLOAT = 55;
  /** RegularExpression Id. */
  int STRING = 56;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "\"import\"",
    "\"package\"",
    "\"func\"",
    "\"var\"",
    "\"const\"",
    "\"type\"",
    "\"struct\"",
    "\"interface\"",
    "\"map\"",
    "\"slice\"",
    "\"range\"",
    "\"for\"",
    "\"if\"",
    "\"else\"",
    "\"switch\"",
    "\"case\"",
    "\"default\"",
    "\"return\"",
    "\"chan\"",
    "\".\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"^\"",
    "\"==\"",
    "\"=\"",
    "\"!=\"",
    "\":\"",
    "\":=\"",
    "\"<\"",
    "\">\"",
    "\">=\"",
    "\"<=\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\";\"",
    "<IDENTIFIER>",
    "<INTEGER>",
    "<FLOAT>",
    "<STRING>",
  };

}
