/* Generated By:JavaCC: Do not edit this line. GolangParser.java */
package Analizador;
public class GolangParser implements GolangParserConstants {

// Inicio de la gramática
  final public void Start() throws ParseException {
    PackageClause();
    ImportDecl();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNC:
      case VAR:
      case TYPE:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      TopLevelDeclaration();
    }
    jj_consume_token(0);
  }

  final public void PackageClause() throws ParseException {
    jj_consume_token(PACKAGE);
    Identifier();
  }

  final public void ImportDecl() throws ParseException {
    jj_consume_token(IMPORT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      ImportSpec();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        jj_consume_token(SEMICOLON);
        ImportSpec();
      }
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  final public void ImportSpec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      jj_consume_token(STRING);
      break;
    case IDENTIFIER:
      Identifier();
      jj_consume_token(STRING);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// Declaraciones a nivel superior
  final public void TopLevelDeclaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNC:
      FunctionDecl();
      break;
    case TYPE:
      TypeDecl();
      break;
    case VAR:
    case IDENTIFIER:
      VarStatement();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// Declaración de funciones
  final public void FunctionDecl() throws ParseException {
    jj_consume_token(FUNC);
    Identifier();
    Signature();
    Block();
  }

  final public void Signature() throws ParseException {
    Parameters();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRUCT:
    case LPAREN:
    case IDENTIFIER:
      Result();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  final public void Parameters() throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      ParameterList();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void ParameterList() throws ParseException {
    ParameterDecl();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      ParameterDecl();
    }
  }

  final public void ParameterDecl() throws ParseException {
    Identifier();
    Type();
  }

  final public void Result() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      Parameters();
      break;
    case STRUCT:
    case IDENTIFIER:
      Type();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// Declaración de tipos
  final public void TypeDecl() throws ParseException {
    jj_consume_token(TYPE);
    Identifier();
    Type();
  }

  final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRUCT:
      jj_consume_token(STRUCT);
      jj_consume_token(LBRACE);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        FieldDecl();
      }
      jj_consume_token(RBRACE);
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void FieldDecl() throws ParseException {
    Identifier();
    Type();
  }

// Bloques y declaraciones de variables
  final public void Block() throws ParseException {
    jj_consume_token(LBRACE);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case FOR:
      case IF:
      case RETURN:
      case FMT:
      case LBRACE:
      case IDENTIFIER:
      case INTEGER:
      case FLOAT:
      case STRING:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      Statement();
    }
    jj_consume_token(RBRACE);
  }

  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
    case IDENTIFIER:
      VarStatement();
      break;
    case INTEGER:
    case FLOAT:
    case STRING:
      ExpressionStatement();
      break;
    case RETURN:
      ReturnStatement();
      break;
    case LBRACE:
      Block();
      break;
    case IF:
      IfStatement();
      break;
    case FOR:
      ForStatement();
      break;
    case FMT:
      Print();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Print() throws ParseException {
    jj_consume_token(FMT);
    jj_consume_token(DOT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRINT:
      jj_consume_token(PRINT);
      break;
    case PRINTLN:
      jj_consume_token(PRINTLN);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case INTEGER:
    case FLOAT:
    case STRING:
      Expression();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        Expression();
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void VarStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      VarDeclaration();
      break;
    case IDENTIFIER:
      IdentifierList();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON_ASSIGN:
        ShortDeclaration();
        break;
      case ASSIGN:
        Assignment();
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void VarDeclaration() throws ParseException {
    jj_consume_token(VAR);
    IdentifierList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
    case IDENTIFIER:
    case INTEGER:
    case FLOAT:
    case STRING:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        ExpressionList();
        break;
      case IDENTIFIER:
      case INTEGER:
      case FLOAT:
      case STRING:
        Multiple();
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
  }

  final public void Multiple() throws ParseException {
    Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      Expression();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        Expression();
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
  }

  final public void ShortDeclaration() throws ParseException {
    jj_consume_token(COLON_ASSIGN);
    ExpressionList();
  }

  final public void Assignment() throws ParseException {
    jj_consume_token(ASSIGN);
    ExpressionList();
  }

  final public void ExpressionStatement() throws ParseException {
    Expression();
  }

  final public void ReturnStatement() throws ParseException {
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case INTEGER:
    case FLOAT:
    case STRING:
      Operation();
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
  }

  final public void Operation() throws ParseException {
    Expression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case MULTIPLY:
      case DIVIDE:
      case MOD:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_8;
      }
      Operator();
      Expression();
    }
    jj_consume_token(RPAREN);
  }

  final public void IfStatement() throws ParseException {
    jj_consume_token(IF);
    condicion();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
      case NOT:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_9;
      }
      op_logic();
      condicion();
    }
    Block();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      Block();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
  }

  final public void condicion() throws ParseException {
    condicionS();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
      case NOT:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_10;
      }
      op_logic();
      condicionS();
    }
  }

  final public void condicionS() throws ParseException {
    Expression();
    op_relation();
    Expression();
  }

  final public void op_logic() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      break;
    case OR:
      jj_consume_token(OR);
      break;
    case NOT:
      jj_consume_token(NOT);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void op_relation() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT_EQUAL:
      jj_consume_token(NOT_EQUAL);
      break;
    case LT:
      jj_consume_token(LT);
      break;
    case LTE:
      jj_consume_token(LTE);
      break;
    case EQUAL:
      jj_consume_token(EQUAL);
      break;
    case GT:
      jj_consume_token(GT);
      break;
    case GTE:
      jj_consume_token(GTE);
      break;
    case NOT:
      jj_consume_token(NOT);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ForStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FOR:
      jj_consume_token(FOR);
      condicionS();
      Block();
      break;
    case IDENTIFIER:
      IdentifierList();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON_ASSIGN:
        ShortDeclaration();
        break;
      case ASSIGN:
        Assignment();
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEMICOLON);
      condicionS();
      jj_consume_token(SEMICOLON);
      STEP();
      Block();
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void STEP() throws ParseException {
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 58:
      jj_consume_token(58);
      break;
    case 59:
      jj_consume_token(59);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// Listas de identificadores y expresiones
  final public void IdentifierList() throws ParseException {
    Identifier();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      Identifier();
    }
  }

  final public void Identifier() throws ParseException {
    jj_consume_token(IDENTIFIER);
  }

  final public void ExpressionList() throws ParseException {
    Expression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_12;
      }
      jj_consume_token(COMMA);
      Expression();
    }
  }

  final public void Expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      jj_consume_token(INTEGER);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        Exxxpresion();
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Exxxpresion() throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case INTEGER:
    case FLOAT:
    case STRING:
      Expression();
      OList();
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void EList() throws ParseException {
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_13;
      }
      jj_consume_token(COMMA);
      Expression();
    }
  }

  final public void OList() throws ParseException {
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case MULTIPLY:
      case DIVIDE:
      case MOD:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_14;
      }
      Operator();
      Expression();
    }
  }

  final public void Operator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case MULTIPLY:
      jj_consume_token(MULTIPLY);
      break;
    case DIVIDE:
      jj_consume_token(DIVIDE);
      break;
    case MOD:
      jj_consume_token(MOD);
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public GolangParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[40];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1600,0x0,0x0,0x0,0x1600,0x2000,0x0,0x0,0x2000,0x0,0x2000,0x1860400,0x1860400,0x6000000,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0xf0000000,0x0,0x80000,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf0000000,0xf0000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x400000,0x200000,0x4000,0x2400000,0x400000,0x404000,0x400000,0x100000,0x404000,0x400000,0x400000,0x3c10000,0x3c10000,0x0,0x100000,0x3c00000,0x48,0x400000,0x3c00008,0x3c00008,0x100000,0x8,0x3c00000,0x1,0x3800,0x0,0x3800,0x3800,0x2794,0x48,0x400000,0xc000000,0x100000,0x100000,0x4000,0x3c00000,0x3c00000,0x100000,0x1,0x1,};
   }

  /** Constructor with InputStream. */
  public GolangParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public GolangParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GolangParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public GolangParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GolangParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public GolangParser(GolangParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(GolangParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[60];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 40; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 60; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

                            }
