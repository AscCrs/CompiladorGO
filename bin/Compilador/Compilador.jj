options {
  IGNORE_CASE = true;
  STATIC = false;
  BUILD_PARSER = true;
  FORCE_LA_CHECK = true;
}

PARSER_BEGIN(GolangParser)

package Analizador;
import java.io.*;
public class GolangParser { }

PARSER_END(GolangParser)

SKIP : {
    " "
  | "\t"
  | "\r"
  | "\n"
  |  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
  |  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

// Palabras reservadas
TOKEN : { 
    < IMPORT : "import" >
|   < PACKAGE : "package" >
|   < FUNC : "func" >
|   < VAR : "var" >
|   < CONST : "const" >
|   < TYPE : "type" >
|   < STRUCT : "struct" >
|   < INTERFACE : "interface" >
|   < MAP : "map" >
|   < SLICE : "slice" >
|   < RANGE : "range" >
|   < FOR : "for" >
|   < IF : "if" >
|   < ELSE : "else" >
|   < SWITCH : "switch" >
|   < CASE : "case" >
|   < DEF : "default" >
|   < RETURN : "return" >
|   < CHAN : "chan" >
}

// Operadores
TOKEN : {
    < DOT : "." >
|   < PLUS : "+" >
|   < MINUS : "-" >
|   < MULTIPLY : "*" >
|   < DIVIDE : "/" >
|   < MOD : "%" >
|   < XOR : "^" >
|   < EQUAL : "==" >
|   < ASSIGN : "=" >
|   < NOT_EQUAL : "!=" >
|   < COLON : ":" >
|   < COLON_ASSIGN : ":=" >
|   < LT : "<" >
|   < GT : ">" >
|   < GTE : ">=" >
|   < LTE : "<=" >
|   < AND : "&&" >
|   < OR : "||" >
|   < NOT : "!" >
}

// Delimitadores
TOKEN : {
    < LPAREN : "(" >
|   < RPAREN : ")" >
|   < LBRACE : "{" >
|   < RBRACE : "}" >
|   < LBRACKET : "[" >
|   < RBRACKET : "]" >
|   < COMMA : "," >
|   < SEMICOLON : ";" >
}

// Identificadores y literales
TOKEN : { 
    < IDENTIFIER : (["a"-"z", "A"-"Z", "_"]) (["a"-"z", "A"-"Z", "0"-"9", "_"])* >
|   < INTEGER : (["0"-"9"])+ >
|   < FLOAT : (["0"-"9"])+ "." (["0"-"9"])* >
|   < STRING : 
          "\"" ( ~["\"","\\","\n","\r"] 
        | "\\" ( ["n","t","b","r","f","\\","\'","\""] 
        | ["0"-"7"] (["0"-"7"])?  
        | ["0"-"3"] ["0"-"7"] ["0"-"7"] 
        | ( ["\n","\r"] 
        | "\r\n")))* "\""
    >
}

// Reglas
void CompilationUnit() : {}
{
    ( PackageDeclaration() )? ( ImportDeclaration() )* ( TopLevelDeclaration() )* <EOF>
}

void PackageDeclaration() : {}
{
    < PACKAGE > < IDENTIFIER > (< SEMICOLON >)?
}

void ImportDeclaration() : {}
{
    <IMPORT> <STRING> (<SEMICOLON>)?
}

void TopLevelDeclaration() : {}
{
    <STRING>
}